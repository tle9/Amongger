package com.example.amongger.game;

public class MapLayoutManager {
    private int[][] mapLayout;
    public MapLayoutManager(String difficulty) {
        if (difficulty.equals("Difficulty: Level 1")) {
            loadLevel1();
        } else if (difficulty.equals("Difficulty: Level 2")) {
            loadLevel2();
        } else {
            loadLevelHmmm();
        }
    }

    public int[][] getMapLayout() {
        return mapLayout;
    }

    /**
     * Map Layout based on difficulty.
     * 0 = level 1
     * 1 = level 2
     * 2 = level Hmmm
     */
    private void loadLevel1() {
        mapLayout = new int[][] {{69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69},
            {69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69},
            {0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0},
            {2, 3, 4, 5, 3, 4, 5, 3, 4, 5, 3, 2},
            {6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6},
            {6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6},
            {6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6},
            {6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6},
            {6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6},
            {6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6},
            {6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6},
            {8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8},
            {10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10},
            {7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7},
            {7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7},
            {7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7},
            {7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7},
            {7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7},
            {7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7},
            {8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8},
            {9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9},
            {10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10}};
    }

    private void loadLevel2() {
        mapLayout = new int[][] {{69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69},
            {69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69},
            {0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0},
            {2, 3, 4, 5, 3, 4, 5, 3, 4, 5, 3, 2},
            {6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6},
            {6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6},
            {6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6},
            {6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6},
            {6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6},
            {6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6},
            {6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6},
            {6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6},
            {6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6},
            {6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6},
            {8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8},
            {7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7},
            {7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7},
            {7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7},
            {7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7},
            {8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8},
            {9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9},
            {10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10}};
    }

    private void loadLevelHmmm() {
        mapLayout = new int[][] {{69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69},
            {69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69},
            {0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0},
            {2, 3, 4, 5, 3, 4, 5, 3, 4, 5, 3, 2},
            {6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6},
            {6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6},
            {6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6},
            {6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6},
            {8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8},
            {7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7},
            {7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7},
            {7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7},
            {7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7},
            {7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7},
            {7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7},
            {7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7},
            {7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7},
            {7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7},
            {7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7},
            {7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7},
            {8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8},
            {10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10}};
    }
}
